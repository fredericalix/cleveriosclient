import Foundation
import SwiftUI
// Import n√©cessaire pour CleverCloudSDK
import Combine

/// Coordinateur global pour g√©rer l'√©tat d'authentification de l'application
@MainActor
@Observable
final class AppCoordinator {
    
    // MARK: - Properties
    var isAuthenticated = false
    var currentUser: String?
    var authError: String?
    var isCheckingAuth = true
    
    // Services
    private var _oauthService: CCOAuthService?
    private var authCheckTimer: Timer?
    private var _configuration: CCConfiguration
    
    /// Service OAuth partag√© - accessible pour LoginView
    var oauthService: CCOAuthService {
        if _oauthService == nil {
            _oauthService = createOAuthService()
        }
        return _oauthService!
    }
    
    // MARK: - SDK Access
    private var _cleverCloudSDK: CleverCloudSDK?
    
    /// CleverCloud SDK accessible publiquement pour les vues (singleton pattern)
    var cleverCloudSDK: CleverCloudSDK {
        if _cleverCloudSDK == nil {
            _cleverCloudSDK = CleverCloudSDK(configuration: _configuration)
        }
        return _cleverCloudSDK!
    }
    
    // Configuration initiale - sera mise √† jour avec les tokens du Keychain
    private var configuration: CCConfiguration {
        return _configuration
    }
    
    // MARK: - Initialization
    
    init() {
        self.isAuthenticated = false
        self.isCheckingAuth = true
        
        RemoteLogger.shared.info("üöÄ AppCoordinator initialized", metadata: [
            "timestamp": Date().description
        ])
        
        // Initialize configuration first
        let keychain = CCKeychainManager()
        let credentials = keychain.loadCredentials()
        
        // Create configuration with hardcoded consumer keys (from clever-tools)
        _configuration = CCConfiguration(
            consumerKey: "T5nFjKeHH4AIlEveuGhB5S3xg8T19e",      // Credentials officielles
            consumerSecret: "MgVMqTr6fWlf2M0tkC2MXOnhfqBWDT",    // de clever-tools
            enableDebugLogging: true
        )
        
        RemoteLogger.shared.debug("Configuration initialized", metadata: [
            "hasToken": (credentials?.token != nil && !credentials!.token.isEmpty) ? "yes" : "no",
            "hasTokenSecret": (credentials?.secret != nil && !credentials!.secret.isEmpty) ? "yes" : "no"
        ])
        
        // Update tokens if available
        if let credentials = credentials,
           !credentials.token.isEmpty,
           !credentials.secret.isEmpty {
            RemoteLogger.shared.info("üîë Found stored OAuth tokens, updating configuration")
            _configuration.updateTokens(accessToken: credentials.token, accessTokenSecret: credentials.secret)
            self.isAuthenticated = true
            RemoteLogger.shared.info("‚úÖ User authenticated from stored credentials")
        } else {
            RemoteLogger.shared.info("üì± No valid OAuth tokens found, user needs to login")
        }
        
        isCheckingAuth = false
        
        setupAuthentication()
        startAuthenticationMonitoring()
    }
    
    // MARK: - Public Methods
    
    /// Configuration initiale de l'authentification
    func setupAuthentication() {
        // Cr√©er le service OAuth CLI (via la propri√©t√© calcul√©e)
        _ = oauthService
        
        // V√©rifier imm√©diatement s'il y a des credentials existants
        checkAuthenticationState()
    }
    
    /// D√©marre le processus d'authentification CLI
    func startAuthentication() {
        oauthService.authenticate()
    }
    
    /// D√©connecte l'utilisateur et nettoie tous les √©tats
    func logout() {
        if configuration.enableDebugLogging {
            print("üîê Starting user logout process...")
        }
        
        // D√©connexion via le service OAuth (supprime les credentials du Keychain)
        oauthService.logout()
        
        // Nettoyer tous les √©tats d'authentification
        isAuthenticated = false
        currentUser = nil
        authError = nil
        
        // Effacer les tokens de la configuration
        _configuration.clearTokens()
        
        if configuration.enableDebugLogging {
            print("‚úÖ User logout completed successfully")
        }
    }
    
    /// Retourne la vue appropri√©e selon l'√©tat d'authentification
    @ViewBuilder
    func rootView() -> some View {
        if isAuthenticated {
            ContentView()
        } else {
            LoginView()
        }
    }
    
    /// Force la v√©rification de l'√©tat d'authentification
    func refreshAuthenticationState() {
        checkAuthenticationState()
    }
    
    /// Force une v√©rification imm√©diate de l'√©tat d'authentification (appel√© apr√®s login)
    func forceAuthenticationCheck() {
        if configuration.enableDebugLogging {
            print("üîç Forcing immediate authentication check...")
        }
        
        // Recharger les tokens depuis le Keychain
        loadTokensFromKeychain()
        
        checkAuthenticationState()
    }
    
    // MARK: - Private Methods
    
    /// Charge les tokens OAuth depuis le Keychain
    private func loadTokensFromKeychain() {
        let keychain = CCKeychainManager()
        
        if let credentials = keychain.loadCredentials() {
            // Mettre √† jour la configuration avec les tokens charg√©s
            _configuration.updateTokens(accessToken: credentials.token, accessTokenSecret: credentials.secret)
            
            if _configuration.enableDebugLogging {
                print("üîë Tokens loaded from Keychain")
                print("   Access Token: \(credentials.token.prefix(10))...")
                print("   Token Secret: \(credentials.secret.prefix(10))...")
                print("   isAuthenticated: \(_configuration.isAuthenticated)")
            }
        } else {
            if _configuration.enableDebugLogging {
                print("üì± No tokens found in Keychain")
            }
        }
    }
    
    /// Cr√©e et retourne un service OAuth configur√©
    private func createOAuthService() -> CCOAuthService {
        return CCOAuthService(configuration: _configuration)
    }
    
    /// D√©marre la surveillance continue de l'√©tat d'authentification
    private func startAuthenticationMonitoring() {
        // V√©rification moins fr√©quente pour √©viter la surcharge (toutes les 2 secondes au lieu de 0.1s)
        authCheckTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { [weak self] _ in
            Task { @MainActor in
                self?.checkAuthenticationState()
            }
        }
    }
    
    /// V√©rifie l'√©tat d'authentification actuel
    private func checkAuthenticationState() {
        let previousAuthState = isAuthenticated
        let currentAuthState = oauthService.isAuthenticated
        
        // Seulement mettre √† jour si l'√©tat a vraiment chang√©
        if previousAuthState != currentAuthState {
            // Mettre √† jour l'√©tat local
            isAuthenticated = currentAuthState
            authError = oauthService.authError
            
            if currentAuthState {
                // Nouvellement authentifi√© - recharger les tokens
                loadTokensFromKeychain()
                onAuthenticationSuccess()
            } else {
                // Nouvellement d√©connect√©
                onAuthenticationFailure()
            }
            
            if configuration.enableDebugLogging {
                print("üîÑ Authentication state changed: \(previousAuthState) -> \(currentAuthState)")
            }
        }
        // Sinon, ne rien faire - √©vite les v√©rifications inutiles du keychain
    }
    
    /// Appel√© quand l'authentification r√©ussit
    private func onAuthenticationSuccess() {
        Task {
            await fetchUserInfo()
        }
        
        if configuration.enableDebugLogging {
            print("üéâ Authentication successful - user now logged in!")
        }
    }
    
    /// Appel√© quand l'authentification √©choue ou que l'utilisateur se d√©connecte
    private func onAuthenticationFailure() {
        currentUser = nil
        
        if configuration.enableDebugLogging {
            print("üîê User logged out or authentication failed")
        }
    }
    
    /// R√©cup√®re les informations de l'utilisateur actuel (optionnel)
    private func fetchUserInfo() async {
        // Pour l'instant, on met un placeholder
        // TODO: Utiliser l'API Clever Cloud pour r√©cup√©rer les vraies infos utilisateur
        currentUser = "Clever Cloud User"
        
        if configuration.enableDebugLogging {
            print("‚úÖ User info loaded: \(currentUser ?? "Unknown")")
        }
    }
} 